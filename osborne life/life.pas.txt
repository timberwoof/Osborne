program life;
{$R- }
const         {xsize is number of characters inside frame}
  xsize = 50;
  ysize = 22;
var
  a : array[1..ysize,1..xsize] of char;
  ina : string[xsize];
  adj ,adj1: array[1..ysize,1..xsize] of integer; {count live adjacent cells}
  adji : array[1..xsize,1..8] of integer; {horizontal adjacency lookup table}
  adjj : array[1..ysize,1..8] of integer; {vertical adjacency lookup table}
  pop,births,deaths,gen : integer;

procedure gotoxy(x,y: integer);
var
  offx,offy: integer;
begin
  offx := x + 32;
  offy := y + 32;
  write(chr(27),'=',chr(offy),chr(offx));
end;


procedure init;

var
  i,j : integer;

begin
  write(chr(26),'Initializing...Please wait.');

  for i := 1 to xsize do {horizontal adjacencies}
    begin
      ADJI[I,1]:=I-1;   {       } { positions }
      ADJI[I,2]:=I;     { 1 2 3 } { relative to }
      ADJI[I,3]:=I+1;   {       } { current }
      ADJI[I,4]:=I+1;   { 8 * 4 } { location }
      ADJI[I,5]:=I+1;   {       } { (*) }
      ADJI[I,6]:=I;     { 7 6 5 }
      ADJI[I,7]:=I-1;   {       }
      ADJI[I,8]:=I-1;
    end;
  ADJI[xsize,3]:=1;
  ADJI[xsize,4]:=1;
  ADJI[xsize,5]:=1;
  ADJI[1,1]:=xsize;
  ADJI[1,8]:=xsize;
  ADJI[1,7]:=xsize;

  FOR J := 1 TO ysize do {vertical adjacencies}
    begin
      ADJJ[J,1]:=J-1;
      ADJJ[J,2]:=J-1;
      ADJJ[J,3]:=J-1;
      ADJJ[J,4]:=J;
      ADJJ[J,5]:=J+1;
      ADJJ[J,6]:=J+1;
      ADJJ[J,7]:=J+1;
      ADJJ[J,8]:=J;
    end;
  ADJJ[1,1]:=ysize;
  ADJJ[1,2]:=ysize;
  ADJJ[1,3]:=ysize;
  ADJJ[ysize,5]:=1;
  ADJJ[ysize,6]:=1;
  ADJJ[ysize,7]:=1;

  FOR J := 1 TO ysize do
    for i := 1 to xsize do
      begin
        A[J,i]:=' ';            {blank out life matrix}
        adj[j,i] := 0;          {zero out count matrix}
      end;
  GEN := 0;
  POP := 0;
  BIRTHS := 0;
  DEATHS := 0;
  write(chr(26));
end;


procedure screen;

var
  i,j : integer;

begin
  write(chr(26));
  FOR I := 1 TO ysize do                {left and right edges}
    begin
      gotoxy(0,      i);write('|');
      gotoxy(xsize+1,i);write('|');
    end;
  for i := 1 to xsize do                {top and bottom edges}
    begin
      gotoxy(i,      0);write('-');
      gotoxy(i,ysize+1);write('-');
    end;
  gotoxy(0,      0);       write('+');  {corners}
  gotoxy(xsize+1,0);       write('+');
  gotoxy(xsize+1,ysize+1); write('+');
  gotoxy(0,      ysize+1); write('+');
end;


procedure entry;
var
  i,j : integer;

begin
  gotoxy(2,23); write(' Enter pattern: use spaces and stars. ');

  for j := 1 to ysize do begin          {scan the screen for input}
    gotoxy (1,j);                       {move cursor to next line}
    readln (ina);                       {read that line}
    for i := 1 to length(ina) do        {copy characters}
      a[j,i] := copy(ina,i,1);
  end;

  gotoxy(2,23); write('--------------------------------------');

  FOR I := 1 TO xsize do
    FOR J := 1 TO ysize do
      if a[j,i] <> ' ' then
        begin
          POP := POP + 1;
          ADJ[ADJJ[J,1],ADJI[I,1]] := ADJ[ADJJ[J,1],ADJI[I,1]]+1;
          ADJ[ADJJ[J,2],ADJI[I,2]] := ADJ[ADJJ[J,2],ADJI[I,2]]+1;
          ADJ[ADJJ[J,3],ADJI[I,3]] := ADJ[ADJJ[J,3],ADJI[I,3]]+1;
          ADJ[ADJJ[J,4],ADJI[I,4]] := ADJ[ADJJ[J,4],ADJI[I,4]]+1;
          ADJ[ADJJ[J,5],ADJI[I,5]] := ADJ[ADJJ[J,5],ADJI[I,5]]+1;
          ADJ[ADJJ[J,6],ADJI[I,6]] := ADJ[ADJJ[J,6],ADJI[I,6]]+1;
          ADJ[ADJJ[J,7],ADJI[I,7]] := ADJ[ADJJ[J,7],ADJI[I,7]]+1;
          ADJ[ADJJ[J,8],ADJI[I,8]] := ADJ[ADJJ[J,8],ADJI[I,8]]+1;
        end;
  BIRTHS := POP;
  adj1 := adj;

  gotoxy(0,0);write('+- gen         pop        born         died       -+')

end;



procedure display;

var
  i,j : integer;

begin
  FOR J := 1 TO ysize do
    for i := 1 to xsize do
      begin
        gotoxy(i,j);
        write(a[j,i]);
        end;
  gotoxy(7,0); write(gen:5);
  gotoxy(18,0); write(pop:5);
  gotoxy(31,0); write(births:5);
  gotoxy(44,0); write(deaths:5);
  if pop = 0 then
    begin
      gotoxy(45,0);
      write('all');
    end;
  if births+deaths = 0 then
    begin
      gotoxy(45,0);
      write('none  ');
    end;
end;


procedure newgen;

var
  i,j : integer;

begin
  GEN:=GEN+1;
  DEATHS:=0;
  BIRTHS:=0;
  FOR J := 1 TO ysize do
    FOR I := 1 TO xsize do
      if a[j,i] <> ' ' then
        begin
          IF not((ADJ1[J,I] = 2) OR (ADJ1[J,I] = 3)) THEN
            begin
              POP := POP - 1;
              DEATHS := DEATHS + 1;

              A[j,i] := ' ';
              ADJ[ADJJ[J,1],ADJI[I,1]] := ADJ[ADJJ[J,1],ADJI[I,1]]-1;
              ADJ[ADJJ[J,2],ADJI[I,2]] := ADJ[ADJJ[J,2],ADJI[I,2]]-1;
              ADJ[ADJJ[J,3],ADJI[I,3]] := ADJ[ADJJ[J,3],ADJI[I,3]]-1;
              ADJ[ADJJ[J,4],ADJI[I,4]] := ADJ[ADJJ[J,4],ADJI[I,4]]-1;
              ADJ[ADJJ[J,5],ADJI[I,5]] := ADJ[ADJJ[J,5],ADJI[I,5]]-1;
              ADJ[ADJJ[J,6],ADJI[I,6]] := ADJ[ADJJ[J,6],ADJI[I,6]]-1;
              ADJ[ADJJ[J,7],ADJI[I,7]] := ADJ[ADJJ[J,7],ADJI[I,7]]-1;
              ADJ[ADJJ[J,8],ADJI[I,8]] := ADJ[ADJJ[J,8],ADJI[I,8]]-1;
            end;
        end
       else
        IF (ADJ1[J,I] = 3) THEN
          begin
            POP := POP + 1;
            births := births + 1;
            A[j,i] := '*';
            ADJ[ADJJ[J,1],ADJI[I,1]] := ADJ[ADJJ[J,1],ADJI[I,1]]+1;
            ADJ[ADJJ[J,2],ADJI[I,2]] := ADJ[ADJJ[J,2],ADJI[I,2]]+1;
            ADJ[ADJJ[J,3],ADJI[I,3]] := ADJ[ADJJ[J,3],ADJI[I,3]]+1;
            ADJ[ADJJ[J,4],ADJI[I,4]] := ADJ[ADJJ[J,4],ADJI[I,4]]+1;
            ADJ[ADJJ[J,5],ADJI[I,5]] := ADJ[ADJJ[J,5],ADJI[I,5]]+1;
            ADJ[ADJJ[J,6],ADJI[I,6]] := ADJ[ADJJ[J,6],ADJI[I,6]]+1;
            ADJ[ADJJ[J,7],ADJI[I,7]] := ADJ[ADJJ[J,7],ADJI[I,7]]+1;
            ADJ[ADJJ[J,8],ADJI[I,8]] := ADJ[ADJJ[J,8],ADJI[I,8]]+1;
          end;
  adj1 := adj;
end;


begin
  init;
  screen;
  entry;
  display;
  repeat
    newgen;
    display;
  until (pop = 0) or (births+deaths=0);
end.
