program life;
{$R-}                    {no recursion in this program}
{$x+}            {optimize for speed in array access}
const
    xmin = 1;            {minimum horizintal coordinate}
    xmax = 52;        {maximum horizontal coordinate}
    ymin = 2;        {minimum vertical coordinate}
    ymax = 24;        {maximum vertical coordinate}
    xstart = (xmin+xmax)/2;    {center horizontal coordinate}
    ystart = (ymin+ymax)/2;    {center vertical coordinate}
    Larrow = 8;        {ascii of left arrow key}
    Darrow = 10;    {ascii of down arrow key}
    Uarrow = 11;    {ascii of up arrow key}
    Rarrow = 12;    {ascii of right arrow key}
    CarRet = 13;    {ascii of carriage return key}
var
  a : array[xmin..xmax,ymin..ymax] of char;    {the living matrix}
  adj ,adj1: array[ymin..ymax,xmin..xmax] of integer; {count live adj cells}
  Hadj : array[xmin..xmax,1..8] of integer;     {horiz adjacency lookup table}
  Vadj : array[ymin..ymax,1..8] of integer;     {vert adjacency lookup table}
  pop,births,deaths,gen : integer;        {vital statistics}
  inc : char;
  x,y : integer;

procedure init; {initializes adjacency lookup tables and life matrix}
var
  i,j,k : integer;
begin
  for i := xmin to xmax do {horizontal adjacencies}
    begin
      Hadj[I,1]:=I-1;   {       } { positions }
      Hadj[I,2]:=I;     { 1 2 3 } { relative to }
      Hadj[I,3]:=I+1;   {       } { current }
      Hadj[I,4]:=I+1;   { 8 * 4 } { location }
      Hadj[I,5]:=I+1;   {       } { (*) }
      Hadj[I,6]:=I;     { 7 6 5 }
      Hadj[I,7]:=I-1;   {       }
      Hadj[I,8]:=I-1;
    end;
  Hadj[xmax,3]:=xmin;
  Hadj[xmax,4]:=xmin;
  Hadj[xmax,5]:=xmin;
  Hadj[xmin,1]:=xmax;
  Hadj[xmin,8]:=xmax;
  Hadj[xmin,7]:=xmax;

  FOR J := ymin TO ymax do {vertical adjacencies}
    begin
      Vadj[J,1]:=J-1;
      Vadj[J,2]:=J-1;
      Vadj[J,3]:=J-1;
      Vadj[J,4]:=J;
      Vadj[J,5]:=J+1;
      Vadj[J,6]:=J+1;
      Vadj[J,7]:=J+1;
      Vadj[J,8]:=J;
    end;
  Vadj[ymin,1]:=ymax;
  Vadj[ymin,2]:=ymax;
  Vadj[ymin,3]:=ymax;
  Vadj[ymax,5]:=ymin;
  Vadj[ymax,6]:=ymin;
  Vadj[ymax,7]:=ymin;

  FOR J := ymin TO ymax do
    for i := xmin to xmax do
      begin
        a[i,j]:=' ';        {blank out life matrix}
        adj[j,i] := 0;        {zero out count matrix}
      end;
  GEN := 1;            {initialize vital statistics}
  POP := 0;
  BIRTHS := 0;
  DEATHS := 0;
  ClrScr;
end;

procedure entry; {arrow-key-directed input editor}
{Arrow keys nondestructively move cursor around screen, wrapping around edges.}
{<*> enters a live cell; <space> 'kills' a cell; default is 'dead'.}
{<+> returns cursor to starting position.}
var
    i,j,k,x,y,xpos,ypos,xdir,ydir : integer;
    inc : char;
begin
    gotoxy(1,1);write('> LIFE: use arrow keys, *, and space. CR when done.');
    xpos := xstart;                {initialize cursor position}
    ypos := ystart;
    xdir := 1;
    ydir := 0;
    gotoxy(xpos,ypos);                {center cursor}
    read(kbd,inc);                {read initial input character}
    while inc <> char(CarRet) do         {until <return>}
    begin
        gotoxy(xpos,ypos);
        if inc = char(Larrow) then        {left}
        begin
            xdir := -1;
            ydir := 0;
            gotoxy(1,1);write('<');
        end
        else if inc = char(Darrow) then        {down}
        begin
            xdir := 0;
            ydir := +1;
            gotoxy(1,1);write('v');
        end
        else if inc = char(Uarrow) then        {up}
        begin
            xdir := 0;
            ydir := -1;
            gotoxy(1,1);write('^');
        end
        else if inc = char(Rarrow) then        {right}
        begin
            xdir := 1;
            ydir := 0;
            gotoxy(1,1);write('>');
        end
        else if inc = '+' then            {center}
        begin
            xpos := xstart;
            ypos := ystart;
            xdir := 1;
            ydir := 0;
            gotoxy(1,1);write('>');
        end
        else if inc = '*' then            {live cell}
        begin
            gotoxy(xpos,ypos);
            write ('*');
            a[xpos,ypos] := '*';
            xpos := xpos + xdir;                    {move on x}
            if xpos < xmin then xpos := xmax;
            if xpos > xmax then xpos := xmin;
            ypos := ypos + ydir;            {move on y}
            if ypos < ymin then ypos := ymax;
            if ypos > ymax then ypos := ymin;
        end
        else if inc = ' ' then            {dead cell}
        begin
            gotoxy(xpos,ypos);
            write (' ');
            a[xpos,ypos] := ' ';
            xpos := xpos + xdir;                    {move on x}
            if xpos < xmin then xpos := xmax;
            if xpos > xmax then xpos := xmin;
            ypos := ypos + ydir;            {move on y}
            if ypos < ymin then ypos := ymax;
            if ypos > ymax then ypos := ymin;
        end;
        gotoxy(xpos,ypos);
        read(kbd,inc);                {get next input character}
    end; {while}

  {set up initial adjancy count}
  FOR J := ymin TO ymax do
    FOR I := xmin TO xmax do
    begin
      if a[i,j] = '*' then
        begin
          POP := POP + 1;
          for k := 1 to 8 do
              ADJ[Vadj[J,k],Hadj[I,k]] := ADJ[Vadj[J,k],Hadj[I,k]]+1;
        end;
    end;

    {set up initial vital statistics}
    BIRTHS := POP;
    adj1 := adj;

    {set up headings}
    LowVideo;
    gotoxy(1,1);write('   gen        pop         born         died         ');
    NormVideo;
end; {entry}

procedure display; {display current state of life on vdt}
var
  i,j,k : integer;
begin
  FOR J := ymin TO ymax do
    for i := xmin to xmax do
      begin
        gotoxy(i,j);
        write(a[i,j]);
        end;

  {display vital statistics}
  gotoxy(7,1); write(gen:5);
  gotoxy(18,1); write(pop:5);
  gotoxy(31,1); write(births:5);
  gotoxy(44,1); write(deaths:5);

  if pop = 0 then
    begin
      gotoxy(44,0);
      write('all');
    end;

  if births+deaths = 0 then
    begin
      gotoxy(44,0);
      write('none  ');
    end;
end; {display}

procedure newgen; {updates life matrix}
var
  i,j,k : integer;
begin
  GEN:=GEN+1;
  DEATHS:=0;
  BIRTHS:=0;
  FOR J := ymin TO ymax do
      FOR I := xmin TO xmax do
          if a[i,j] <> ' ' then begin
              {if there aren't 2|3 live cells adjacent to a live cell}
              IF not((ADJ1[J,I] = 2) OR (ADJ1[J,I] = 3)) THEN begin
                  {then that cell dies}
                  POP := POP - 1;
                  DEATHS := DEATHS + 1;
                  a[i,j] := ' ';
                  for k := 1 to 8 do {update adjacencies}
                      ADJ[Vadj[J,k],Hadj[I,k]] := ADJ[Vadj[J,k],Hadj[I,k]]-1;
                  end;
              end
          else
          IF (ADJ1[J,I] = 3) THEN begin
              {if there are three live cells adjacent to a dead cell}
              {then that cell comes alive}
              POP := POP + 1;
              births := births + 1;
              a[i,j] := '*';
              for k := 1 to 8 do {update adacencies}
                  ADJ[Vadj[J,k],Hadj[I,k]] := ADJ[Vadj[J,k],Hadj[I,k]]+1;
          end;
      adj1 := adj;
  end;

begin
  init;        {initialize matrices}
  entry;    {enter life matrix}
  display;    {display initial life matrix}
  repeat
    newgen;    {calculate new situation}
    display;    {display new situation}
  until (pop = 0) or (births+deaths=0);
end.
